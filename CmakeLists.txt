# CMakeLists.txt

# CMake 최소 버전 설정
cmake_minimum_required(VERSION 3.14)

# 프로젝트 정보 설정
project(GarbageCollector
        VERSION 1.0.0
        DESCRIPTION "C++ Garbage Collector Implementation"
        LANGUAGES CXX)

# 컴파일러 설정
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# 빌드 타입이 지정되지 않은 경우 Debug로 설정
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Debug)
endif()

# 컴파일러 경고 설정
if(MSVC)
    add_compile_options(/W4 /WX)
else()
    add_compile_options(
            -Wall            # 기본 경고
            -Wextra          # 추가 경고
            -Wpedantic       # 표준 준수 검사
            -Werror          # 경고를 에러로 처리
    )
endif()

# 디렉토리 경로 설정
set(GC_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/include")
set(GC_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/src")
set(GC_TEST_DIR "${CMAKE_CURRENT_SOURCE_DIR}/tests")

# 소스 파일 자동 수집
file(GLOB_RECURSE GC_SOURCES
        "${GC_SOURCE_DIR}/*.cpp"
        "${GC_SOURCE_DIR}/*.cxx"
        "${GC_SOURCE_DIR}/*.cc"
)

# 헤더 파일 자동 수집
file(GLOB_RECURSE GC_HEADERS
        "${GC_INCLUDE_DIR}/*.h"
        "${GC_INCLUDE_DIR}/*.hpp"
        "${GC_INCLUDE_DIR}/*.hxx"
)

# 수집된 파일 목록 출력 (디버깅용)
message(STATUS "Found source files:")
foreach(SOURCE ${GC_SOURCES})
    message(STATUS "  ${SOURCE}")
endforeach()

message(STATUS "Found header files:")
foreach(HEADER ${GC_HEADERS})
    message(STATUS "  ${HEADER}")
endforeach()

# 라이브러리 생성
add_library(gc_lib STATIC ${GC_SOURCES})

# include 디렉토리 설정
target_include_directories(gc_lib
        PUBLIC
        ${GC_INCLUDE_DIR}    # 외부에서 사용할 헤더
        PRIVATE
        ${GC_SOURCE_DIR}     # 내부용 헤더
)

# 변경 감지를 위한 설정
set_property(DIRECTORY PROPERTY CMAKE_CONFIGURE_DEPENDS
        "${GC_SOURCE_DIR}"
        "${GC_INCLUDE_DIR}"
)

# 실행 파일 생성 (main.cpp가 존재하는 경우)
if(EXISTS "${GC_SOURCE_DIR}/main.cpp")
    add_executable(gc_demo "${GC_SOURCE_DIR}/main.cpp")
    target_link_libraries(gc_demo PRIVATE gc_lib)
endif()

# 테스트 설정
option(BUILD_TESTING "Build the testing tree." ON)
if(BUILD_TESTING)
    # 테스트 소스 파일 수집
    file(GLOB_RECURSE TEST_SOURCES
            "${GC_TEST_DIR}/*.cpp"
            "${GC_TEST_DIR}/*.cxx"
    )

    # 테스트 파일이 존재하는 경우에만 테스트 설정
    if(TEST_SOURCES)
        # Google Test 찾기
        find_package(GTest QUIET)

        if(GTest_FOUND)
            enable_testing()

            # 테스트 실행 파일 생성
            add_executable(gc_tests ${TEST_SOURCES})

            # 테스트에 필요한 라이브러리 링크
            target_link_libraries(gc_tests
                    PRIVATE
                    gc_lib
                    GTest::GTest
                    GTest::Main
            )

            # CTest 설정
            include(CTest)
            add_test(NAME gc_tests COMMAND gc_tests)
        else()
            message(STATUS "Google Test not found - tests will not be built")
        endif()
    endif()
endif()

# 설치 규칙
include(GNUInstallDirs)
install(TARGETS gc_lib
        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

install(FILES ${GC_HEADERS}
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/gc
)

# 빌드 정보 출력
message(STATUS "")
message(STATUS "Project configuration:")
message(STATUS "  Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "  Compiler: ${CMAKE_CXX_COMPILER_ID}")
message(STATUS "  C++ Standard: ${CMAKE_CXX_STANDARD}")
message(STATUS "")